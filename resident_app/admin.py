from django.contrib import admin
from django.utils.html import format_html
from .models import *
from mailing_app.models import Subscription

class MapMarkerInline(admin.StackedInline):
    model = MapMarker
    extra = 0
    can_delete = False
    verbose_name = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ'
    verbose_name_plural = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ'
    fields = ('x', 'y')


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ('name',)
    search_fields = ('name', 'description')

    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not change: 
            Subscription.objects.create(
                name=obj.name,
                description=obj.description
            )


@admin.register(Resident)
class ResidentAdmin(admin.ModelAdmin):
    inlines = [MapMarkerInline]
    list_display = ('name', 'building', 'entrance', 'floor', 'office')
    list_display_links = ('name', 'building', 'entrance', 'floor', 'office')
    list_filter = ('building', 'entrance', 'floor', 'office')
    search_fields = ('name', 'email', 'phone_number', 'pin_code')
    list_per_page = 20
    ordering = ('name',)
    filter_horizontal = ('categories',)

    def get_fieldsets(self, request, obj=None):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç photo_preview —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        fieldsets = [
            ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
                'fields': ('name', 'categories', 'description', 'info')
            }),
            ('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', {
                'fields': ('email', 'phone_number', 'official_website')
            }),
            ('–ê–¥—Ä–µ—Å', {
                'fields': ('address', 'building', 'entrance', 'floor', 'office'),
            }),
            ('–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', {
                'fields': ('working_time',),
                'classes': ('wide',)
            }),
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–∏–Ω-–∫–æ–¥
        photo_fields = ['photo', 'pin_code']
        if obj:  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            photo_fields.insert(1, 'photo_preview')

        fieldsets.append((
            '–§–æ—Ç–æ –∏ –ø—Ä–æ—á–µ–µ',
            {'fields': tuple(photo_fields)}
        ))

        return fieldsets

    def get_readonly_fields(self, request, obj=None):
        """email, phone_number –∏ pin_code –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        ro = ['pin_code']
        if obj:
            ro += ['photo_preview']
        return ro

    def floor_office(self, obj):
        return f"{obj.floor} —ç—Ç–∞–∂, –æ—Ñ–∏—Å {obj.office}"
    floor_office.short_description = '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
    floor_office.admin_order_field = 'floor'

    def contact_info(self, obj):
        contacts = []
        if obj.email:
            contacts.append(f"‚úâ {obj.email}")
        if obj.phone_number:
            contacts.append(f"üìû {obj.phone_number}")
        return format_html("<br>".join(contacts))
    contact_info.short_description = '–ö–æ–Ω—Ç–∞–∫—Ç—ã'

    def pin_code_display(self, obj):
        return obj.pin_code or '‚Äî'
    pin_code_display.short_description = '–ü–∏–Ω-–∫–æ–¥'

    def photo_preview(self, obj):
        if obj and obj.photo:
            return format_html('<img src="{}" style="max-height: 200px;"/>', obj.photo.url)
        return "–ù–µ—Ç —Ñ–æ—Ç–æ"
    photo_preview.short_description = "–ü—Ä–µ–≤—å—é —Ñ–æ—Ç–æ"
